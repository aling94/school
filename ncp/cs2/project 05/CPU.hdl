// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */
// Designed by Alvin Ling
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // D-register: Load data (ALU output) during c-instruction
		And(a = instruction[15], b = instruction[4], out = loadD);				//When instruction[15] and d2 is on, load D
		DRegister(in = outALU, load = loadD, out = outD);	

    // A-register: Load either address (a-instruction) or computed data from ALU( c-instruction)
		Mux16(a = instruction, b = outALU, sel = instruction[15],	out = inA);	//If instruction[15] = 0, load instruction as address, else load ALU output
		Not(in = instruction[15], out = notI15);								//instruction[15] = 0 -> a-instruction, instruction[15] = 1 -> c-instruction
		Or(a = notI15, b = instruction[5], out = loadA);						//If c-instruction, check if d1 is on -> Load A-register
		ARegister(in = inA, load = loadA, out = outA, out[0..14] = addressM);

    // Memory: Write to M if c-instruction and instruction[3] (d3) is on
		And(a = instruction[15], b = instruction[3], out = writeM);

    // ALU: computes functions with D and A or M, directed by instruction[12] (a-bit)
		Mux16(a = outA, b = inM, sel = instruction[12], out = AM);				//Use a-bit to load A or M data
		ALU(x = outD, y = AM, zx = instruction[11],								//Load ALU control bits with respective comp-bits from c-instruction
			nx = instruction[10], zy = instruction[9],
			ny = instruction[8], f = instruction[7], no = instruction[6],
			out = outM, out = outALU, zr = EQ, ng = LT);						//zr = 1 -> out = 0 -> EQ; ng = 1 ->  out<0 -> LT
		Or(a = LT, b = EQ, out = checkGT);										//If LT and EQ are 0, then out>0 -> GT
		Not(in = checkGT, out = GT);											//Take Not of checkGT to get a true if out>0
	
	// JUMP Logic	
		And(a = instruction[2], b = LT,out = JLT);								//If instruction[2] = 1 (j1 / JLT) and if out<0 (LT = 1) -> jump
		And(a = instruction[1], b = EQ,out = JEQ);								//If instruction[1] = 1 (j2 / JEQ) and if out = 0 (EQ = 1) -> jump
		And(a = instruction[0], b = GT,out = JGT);								//If instruction[0] = 1 (j3 / JGT) and if out>0 (GT = 1) -> jump 
		Or(a = JLT, b = JEQ,out = JLE);											//Check if any jumps are on
		Or(a = JLE, b = JGT,out = JMP);
		And(a = JMP, b = instruction[15], out = loadPC);						//If j-bits are on and c-instruction -> load PC
		Not(in = loadPC, out = inc);											//If no JUMP is issued (JMP = 0), PC increments
																				//and vice versa -> Take Not of loadPC

    // Set PC to A if a JUMP is issued, otherwise increment
		PC(in = outA,inc = inc,load = loadPC,reset = reset,out[0..14] = pc);
}